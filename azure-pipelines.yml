# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pr:
  branches:
    include:
      - main

variables:
  nodeVersion: '20.x'
  npm_config_cache: $(Pipeline.Workspace)/.npm

stages:
  - stage: Init
    displayName: 'Init'
    jobs:
      - job: connectivity
        displayName: 'Check Connectivity'
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '$(nodeVersion)'
            displayName: 'Use Node.js $(nodeVersion)'

          - script: |
              # Check GitHub connectivity
              echo "Checking GitHub connectivity..."
              curl -s -o /dev/null -w "GitHub Status: %{http_code}\n" https://api.github.com/

              # Check npm registry
              echo "Checking npm registry..."
              npm ping

              # Show npm config
              echo "npm configuration:"
              npm config list

              # Verify git remote
              echo "Git remote info:"
              git remote -v
            displayName: 'Check GitHub and npm connectivity'

  - stage: Lint
    displayName: 'Lint'
    dependsOn: Init
    condition: succeeded()
    jobs:
      - job: lint
        displayName: 'Run lint'
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '$(nodeVersion)'
            displayName: 'Use Node.js $(nodeVersion)'

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: $(npm_config_cache)
              restoreKeys: |
                npm | "$(Agent.OS)"
            displayName: 'Cache npm'

          - script: npm ci
            displayName: 'Install dependencies (npm ci)'

          - script: |
              npx -y @angular/cli@$(nodeVersion) version || true
              npm run lint
            displayName: 'Run lint'

  - stage: Test
    displayName: 'Test'
    dependsOn: Init
    condition: succeeded()
    jobs:
      - job: test
        displayName: 'Unit tests'
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '$(nodeVersion)'

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: $(npm_config_cache)
              restoreKeys: |
                npm | "$(Agent.OS)"
            displayName: 'Cache npm'

          - script: npm ci
            displayName: 'Install dependencies (npm ci)'

          - script: |
              # Run unit tests in headless Chrome and produce coverage
              npm run test-headless -- --no-watch --browsers=ChromeHeadless
            displayName: 'Run unit tests (headless)'

  - stage: Build
    displayName: 'Build'
    dependsOn:
    - Lint
    - Test
    condition: succeeded()
    jobs:
      - job: build
        displayName: 'Build and publish'
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '$(nodeVersion)'

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: $(npm_config_cache)
              restoreKeys: |
                npm | "$(Agent.OS)"
            displayName: 'Cache npm'

          - script: npm ci
            displayName: 'Install dependencies (npm ci)'

          - script: npm run build
            displayName: 'Build (production)'

          - script: |
              mkdir -p "$(Build.ArtifactStagingDirectory)/dist"
              if [ -d dist/game-store-react ]; then
                cp -r dist/game-store-react/* "$(Build.ArtifactStagingDirectory)/dist/"
              else
                cp -r dist/* "$(Build.ArtifactStagingDirectory)/dist/"
              fi
            displayName: 'Stage build artifacts'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/dist'
              artifact: 'app-dist'
            displayName: 'Publish pipeline artifact'
